#!/bin/bash

set -x

unset KUBECONFIG
for localns in $(/usr/bin/oc get migrationcontrollers.migration.openshift.io --all-namespaces --no-headers | awk '{print $1}'); do
  clusters=()
  clusters+=(host)
  for c in $(oc -n ${localns} get migclusters -o custom-columns=name:.metadata.name --no-headers); do
    if [ $(oc -n ${localns} get migcluster ${c} -o go-template='{{ .spec.isHostCluster }}') == "false" ]; then
      clusters+=(${c})
    fi
  done

  for cluster in ${clusters[@]}; do
    unset KUBECONFIG
    if [ ${cluster} != "host" ]; then
      token=$(oc get -n $(oc get -n ${localns} migcluster ${cluster} -o go-template='{{ .spec.serviceAccountSecretRef.namespace }}') secret $(oc get -n ${localns} migcluster ${cluster} -o go-template='{{ .spec.serviceAccountSecretRef.name }}') -o go-template='{{ .data.saToken }}' | base64 -d)
      url=$(oc get -n ${localns} migcluster ${cluster} -o go-template='{{ .spec.url }}')
      export KUBECONFIG=/tmp/kubeconfig
      oc login --insecure-skip-tls-verify=true --token=${token} $url
      if [ "$?" != "0" ]; then
        object_collection_path="/must-gather/${cluster}/"
        mkdir -p ${object_collection_path}
        echo "login to cluster ${cluster} unsuccessful."  > "${object_collection_path}/login_error.txt"
        continue
      fi
    fi

    # Resource list
    resources=()

    # Migration
    for i in $(/usr/bin/oc get crd | grep migration.openshift.io | awk '{print $1}'); do
      resources+=($i)
    done

    # Velero
    for i in $(/usr/bin/oc get crd | grep velero.io | awk '{print $1}'); do
      resources+=($i)
    done

    # we use nested loops to nicely output objects partitioned per namespace, kind
    for resource in ${resources[@]}; do
      /usr/bin/oc get ${resource} --all-namespaces -o custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace --no-headers 2> /dev/null | \
      while read ocresource; do
        ocobject=$(echo $ocresource | awk '{print $1}')
        ocproject=$(echo $ocresource | awk '{print $2}')
        if [ -z "${ocproject}" ]|[ "${ocproject}" == "<none>" ]; then
          object_collection_path=must-gather/${cluster}/cluster-scoped-resources/${resource}
          mkdir -p ${object_collection_path}
          /usr/bin/oc get ${resource} -o yaml ${ocobject} > ${object_collection_path}/${ocobject}.yaml
        else
          object_collection_path=must-gather/${cluster}/namespaces/${ocproject}/crs/${resource}
          mkdir -p ${object_collection_path}
          /usr/bin/oc get ${resource} -n ${ocproject} -o yaml ${ocobject} > ${object_collection_path}/${ocobject}.yaml
        fi
      done
    done
  done
done

set +x