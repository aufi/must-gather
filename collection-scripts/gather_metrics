#!/bin/bash

#echo "Snapshotting prometheus (may take 15s) ..."
#oc --insecure-skip-tls-verify exec -n openshift-monitoring prometheus-k8s-0 -- tar cvzf - -C /prometheus . > 
#FILTER=gzip queue /tmp/artifacts/metrics/prometheus-target-metadata.json.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring prometheus-k8s-0 -- /bin/bash -c "curl -G http://localhost:9090/api/v1/targets/metadata --data-urlencode 'match_target={instance!=\"\"}'"


# Prepare gather setup
unset KUBECONFIG
object_collection_path="/must-gather/metrics"
mkdir ${object_collection_path}

# Setup vars
time_now=$(date +%s)
time_day_ago=$(($time_now - 24*60*60))

# OpenShift monitoring namespace status
oc get all -n openshift-monitoring > "${object_collection_path}/openshift_monitoring_status"

# Prometheus - data files dump
echo "Dumping Prometheus data files (might take longer) ..."
oc exec -n openshift-monitoring prometheus-k8s-0 -- \
  tar cvzf - -C /prometheus --exclude "*" --include ./queries.active . > "${object_collection_path}/prom-data.tar.gz"

#echo "Dumping Prometheus metadata ..."
#echo "$(oc exec -n openshift-monitoring prometheus-k8s-0 -- \
#  /bin/bash -c 'curl -G http://localhost:9090/api/v1/targets/metadata --data match_target%3D%7Binstance!%3D%22%22%7D')" \
#  > /must-gather/metrics/prometheus-target-metadata.json.gz

# Prometheus - filtered metrics list using query_range
for metric_name in node_load1 cam_app_workload_migrations mtc_client
do
  oc exec -n openshift-monitoring prometheus-k8s-0 -- \
  curl "http://localhost:9090/api/v1/query_range?query=${metric_name}&start=${time_day_ago}&end=${time_now}&step=14" \
  > "${object_collection_path}/prometheus_${metric_name}.json"
done
